/*import java.net.*;
import java.io.*;
import net.wimpi.modbus.*;
import net.wimpi.modbus.io.ModbusUDPTransaction;
import net.wimpi.modbus.msg.ReadInputDiscretesRequest;
import net.wimpi.modbus.msg.ReadInputDiscretesResponse;
import net.wimpi.modbus.net.UDPMasterConnection;*/

import java.net.InetAddress;

import net.wimpi.modbus.Modbus;
import net.wimpi.modbus.ModbusCoupler;
import net.wimpi.modbus.io.ModbusTCPTransaction;
import net.wimpi.modbus.msg.*;
import net.wimpi.modbus.net.TCPMasterConnection;
import net.wimpi.modbus.procimg.Register;


public class ModBus_Tester {
	
	public static void main(String[] args) {
		int port;
		int unitId;
		try {
			port = 5503;
			unitId = 2;
			//InetAddress addr = InetAddress.getByName("192.168.0.1");
			InetAddress addr = InetAddress.getByName("10.0.2.2");
			TCPMasterConnection con = new TCPMasterConnection(addr);
			//con.setTimeout(3000);
			System.out.println("Trying to connect to "+addr.getCanonicalHostName()+" on port "+port);

			con.setPort(port);
			con.connect();
			System.out.println("here");


		}catch (Exception ex) {
			ex.printStackTrace();
		}
	}
	
	/*public static void main(String[] args) {
		UDPMasterConnection con = null;
		ModbusUDPTransaction trans = null;
		ReadInputDiscretesRequest req = null;
		ReadInputDiscretesResponse res = null;
		
		InetAddress addr = null; //slaves's address
		int port = 5502;
		int ref = 0;
		int count = 0; //number of Discrete Inputs to read
		int repeat = 1; 
		
		try {	
			if ( args.length < 0) {
				System.out.println("Error in args. Args length = " + args.length);
				System.exit(1);
			} 
			else {
				try {
					String astr = args[0];
					//System.out.println(astr);
					int idx = astr.indexOf(':');
					if(idx > 0) {
						port = Integer.parseInt(astr.substring(idx+1));
						astr = astr.substring(0, idx);
					}
					addr = InetAddress.getByName(astr);
					//System.out.println(addr);
					
					ref = Integer.decode(args[1]).intValue();
					count = Integer.decode(args[2]).intValue();
					if (args.length == 4) {
						repeat = Integer.parseInt(args[3]);
					}
				} catch (Exception ex) {
					ex.printStackTrace();
					System.exit(1);
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		System.out.println("Addr: " + addr + " port " + port + " ref: " + ref + " count: " + count + " repeat: "+ repeat);
		//open a connection
		con = new UDPMasterConnection(addr);
		con.setPort(port);
		try {
			con.connect();
			System.out.println(con.isConnected());
			System.out.println(con.getAddress());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			System.out.println("FAILED");
			e.printStackTrace();
		}
		
		//a request
		req = new ReadInputDiscretesRequest(ref, 10);
		System.out.println("Requested function code is: " + req.getFunctionCode());
		
		//a transaction
		trans = new ModbusUDPTransaction(con);
		trans.setRequest(req);
		
		//action
		int k = 0;
		do {
			try {
				trans.execute();
			} catch(Exception e) {
				System.out.println("FAILED");
				e.printStackTrace();
			}
			res = (ReadInputDiscretesResponse)trans.getResponse();
			System.out.println("Digital Inputs Status=" + res.getBitCount());
			k++;
		}while(k < repeat);
		System.out.println("Done! going to close");
		con.close();
		
	}//main
	*/
	
	
	
}//class ModBus_Tester

